#!/usr/bin/env perl

use strict;
use warnings;
use utf8;

use File::Basename;
use File::Spec;

use lib File::Spec->catdir(File::Basename::dirname(__FILE__), 'lib');

use StackTrace::Pretty::Printer;

my $CARP_OUTPUT_PATTERN = qr/(\S+)(?: called)? at (\S+) line (\d+)\.?$/;

my $printer = StackTrace::Pretty::Printer->new(
    excluded_modules => ['bbb'],
);

main();
exit(0);

sub main {
    my $filename = $ARGV[0];

    if ($filename) {
        from_file($filename);
    }
    else {
        from_stdin();
    }
}

sub from_file {
    my ($filename) = @_;

    open my $IN, '<', $filename or die "Failed to open file $filename : $!";
    process_input($IN);
    close $IN;
}

sub from_stdin {
    my $IN = *STDIN;

    process_input($IN);
}

sub process_input {
    my ($IN) = @_;

    while (my $line = <$IN>) {
        chomp($line);

        unless ($line =~ $CARP_OUTPUT_PATTERN) {
            print "$line\n";
            next;
        }

        process_carp_line(0, $line);

        print "\n";
        my $depth = 1;
        while (my $_line = <$IN>) {
            chomp($_line);

            unless ($_line =~ /^\s/) {
                print "$_line\n";
                last;
            }

            process_carp_line($depth, $_line);
            print "\n";
            $depth++;
        }
    }
}

sub process_carp_line {
    my ($depth, $line) = @_;

    my ($dest_func, $filename, $target_line_num) = $line =~ $CARP_OUTPUT_PATTERN;
    $line =~ s/^\s+//;

    $printer->print({
        dest_func => $dest_func,
        filename => $filename,
        lineno => $target_line_num,
        raw => $line,
        depth => $depth,
    });
}
